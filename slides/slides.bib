@book{brown92,
author = {Brown, Stephen D. and Francis, Robert J. and Rose, Jonathan and Vranesic, Zvonko G.},
title = {Field-programmable gate arrays},
year = {1992},
isbn = {0792392485},
publisher = {Kluwer Academic Publishers},
address = {USA}
}

@article{backus78,
author = {Backus, John},
title = {Can programming be liberated from the von Neumann style? a functional
  style and its algebra of programs},
year = {1978},
issue_date = {Aug. 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {8},
issn = {0001-0782},
url = {https://doi.org/10.1145/359576.359579},
doi = {10.1145/359576.359579},
abstract = {Conventional programming languages are growing ever more enormous,
  but not stronger. Inherent defects at the most basic level cause them to be
    both fat and weak: their primitive word-at-a-time style of programming
    inherited from their common ancestor—the von Neumann computer, their close
    coupling of semantics to state transitions, their division of programming
    into a world of expressions and a world of statements, their inability to
    effectively use powerful combining forms for building new programs from
    existing ones, and their lack of useful mathematical properties for
    reasoning about programs.An alternative functional style of programming is
    founded on the use of combining forms for creating programs. Functional
    programs deal with structured data, are often nonrepetitive and
    nonrecursive, are hierarchically constructed, do not name their arguments,
  and do not require the complex machinery of procedure declarations to become
    generally applicable. Combining forms can use high level programs to build
    still higher level ones in a style not possible in conventional
    languages.Associated with the functional style of programming is an algebra
    of programs whose variables range over programs and whose operations are
    combining forms. This algebra can be used to transform programs and to solve
    equations whose “unknowns” are programs in much the same way one transforms
    equations in high school algebra. These transformations are given by
    algebraic laws and are carried out in the same language in which programs
    are written. Combining forms are chosen not only for their programming power
    but also for the power of their associated algebraic laws. General theorems
    of the algebra give the detailed behavior and termination conditions for
    large classes of programs.A new class of computing systems uses the
    functional programming style both in its programming language and in its
    state transition rules. Unlike von Neumann languages, these systems have
    semantics loosely coupled to states—only one state transition occurs per
    major computation.},
journal = {Commun. ACM},
month = {aug},
pages = {613–641},
numpages = {29},
keywords = {algebra of programs, applicative computing systems, applicative
  state transition systems, combining forms, functional forms, functional
    programming, metacomposition, models of computing systems, program
    correctness, program termination, program transformation, programming
    languages, von Neumann computers, von Neumann languages}
}

@article{coelho21,
   title={Automatic heterogeneous quantization of deep neural networks for low-latency inference on the edge for particle detectors},
   volume={3},
   ISSN={2522-5839},
   url={http://dx.doi.org/10.1038/s42256-021-00356-5},
   DOI={10.1038/s42256-021-00356-5},
   number={8},
   journal={Nature Machine Intelligence},
   publisher={Springer Science and Business Media LLC},
   author={Coelho, Claudionor N. and Kuusela, Aki and Li, Shan and Zhuang, Hao and Ngadiuba, Jennifer and Aarrestad, Thea Klaeboe and Loncar, Vladimir and Pierini, Maurizio and Pol, Adrian Alan and Summers, Sioni},
   year={2021},
   month=jun, pages={675–686} }

